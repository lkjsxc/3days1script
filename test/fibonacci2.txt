fn print_int ( x ) {

    // zero
    if x == 0 {
        write ( 1 48 )
        write ( 1 10 )
        return 0
    }

    // negative
    if x < 0 {
        write ( 1 45 )
        &x = - x
    }

    // align Largest digit
    &a = 1000000000
    loop {
        &b = x / a
        if b != 0 {
            break
        }
        &a = a / 10
    }

    // output numbers
    loop {
        &b = x / a % 10
        write ( 1 b + 48 )
        if a == 1 {
            break
        }
        &a = a / 10
    }

    // line break
    write ( 1 10 )
    return 0
}

// f(0) = 0
// f(1) = 1
// f(n) = f(n-1) + f(n-2)
fn fibonacci ( cache_ptr x ) {
    return * ( cache_ptr + x )
}


// cache_ptr[128]
&cache_ptr = * 2
2 = * 2 + 128

// init fibonacci cache
&i = 0
loop {
    if i == 0 {
        &x = 0
    } else if i == 1 {
        &x = 1
    } else if i == 32 {
        break
    } else {
        &x = * ( cache_ptr + i - 1 ) + * ( cache_ptr + i - 2 )
        &status = print_int ( x )
    }
    cache_ptr + i = x
    &i = i + 1
}

&i = 0
loop {
    if i == 32 {
        break
    }
    &status = print_int ( fibonacci ( cache_ptr i ) )
    &i = i + 1
}